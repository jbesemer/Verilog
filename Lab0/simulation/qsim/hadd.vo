// Copyright (C) 2018  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details.

// VENDOR "Altera"
// PROGRAM "Quartus Prime"
// VERSION "Version 18.0.0 Build 614 04/24/2018 SJ Lite Edition"

// DATE "05/25/2018 18:48:09"

// 
// Device: Altera 5CEBA4F23C7 Package FBGA484
// 

// 
// This Verilog file should be used for ModelSim-Altera (Verilog) only
// 

`timescale 1 ps/ 1 ps

module lab0 (
	SW,
	LEDR);
input 	[3:0] SW;
output 	[2:0] LEDR;

wire gnd;
wire vcc;
wire unknown;

assign gnd = 1'b0;
assign vcc = 1'b1;
assign unknown = 1'bx;

tri1 devclrn;
tri1 devpor;
tri1 devoe;
wire \LEDR[0]~output_o ;
wire \LEDR[1]~output_o ;
wire \LEDR[2]~output_o ;
wire \SW[0]~input_o ;
wire \SW[2]~input_o ;
wire \myHalfAdder|Add0~0_combout ;
wire \SW[1]~input_o ;
wire \SW[3]~input_o ;
wire \myHalfAdder|Add0~1_combout ;
wire \myHalfAdder|Add0~2_combout ;


cyclonev_io_obuf \LEDR[0]~output (
	.i(\myHalfAdder|Add0~0_combout ),
	.oe(vcc),
	.dynamicterminationcontrol(gnd),
	.seriesterminationcontrol(16'b0000000000000000),
	.parallelterminationcontrol(16'b0000000000000000),
	.devoe(devoe),
	.o(\LEDR[0]~output_o ),
	.obar());
// synopsys translate_off
defparam \LEDR[0]~output .bus_hold = "false";
defparam \LEDR[0]~output .open_drain_output = "false";
defparam \LEDR[0]~output .shift_series_termination_control = "false";
// synopsys translate_on

cyclonev_io_obuf \LEDR[1]~output (
	.i(\myHalfAdder|Add0~1_combout ),
	.oe(vcc),
	.dynamicterminationcontrol(gnd),
	.seriesterminationcontrol(16'b0000000000000000),
	.parallelterminationcontrol(16'b0000000000000000),
	.devoe(devoe),
	.o(\LEDR[1]~output_o ),
	.obar());
// synopsys translate_off
defparam \LEDR[1]~output .bus_hold = "false";
defparam \LEDR[1]~output .open_drain_output = "false";
defparam \LEDR[1]~output .shift_series_termination_control = "false";
// synopsys translate_on

cyclonev_io_obuf \LEDR[2]~output (
	.i(\myHalfAdder|Add0~2_combout ),
	.oe(vcc),
	.dynamicterminationcontrol(gnd),
	.seriesterminationcontrol(16'b0000000000000000),
	.parallelterminationcontrol(16'b0000000000000000),
	.devoe(devoe),
	.o(\LEDR[2]~output_o ),
	.obar());
// synopsys translate_off
defparam \LEDR[2]~output .bus_hold = "false";
defparam \LEDR[2]~output .open_drain_output = "false";
defparam \LEDR[2]~output .shift_series_termination_control = "false";
// synopsys translate_on

cyclonev_io_ibuf \SW[0]~input (
	.i(SW[0]),
	.ibar(gnd),
	.dynamicterminationcontrol(gnd),
	.o(\SW[0]~input_o ));
// synopsys translate_off
defparam \SW[0]~input .bus_hold = "false";
defparam \SW[0]~input .simulate_z_as = "z";
// synopsys translate_on

cyclonev_io_ibuf \SW[2]~input (
	.i(SW[2]),
	.ibar(gnd),
	.dynamicterminationcontrol(gnd),
	.o(\SW[2]~input_o ));
// synopsys translate_off
defparam \SW[2]~input .bus_hold = "false";
defparam \SW[2]~input .simulate_z_as = "z";
// synopsys translate_on

cyclonev_lcell_comb \myHalfAdder|Add0~0 (
// Equation(s):
// \myHalfAdder|Add0~0_combout  = !\SW[0]~input_o  $ (!\SW[2]~input_o )

	.dataa(!\SW[0]~input_o ),
	.datab(!\SW[2]~input_o ),
	.datac(gnd),
	.datad(gnd),
	.datae(gnd),
	.dataf(gnd),
	.datag(gnd),
	.cin(gnd),
	.sharein(gnd),
	.combout(\myHalfAdder|Add0~0_combout ),
	.sumout(),
	.cout(),
	.shareout());
// synopsys translate_off
defparam \myHalfAdder|Add0~0 .extended_lut = "off";
defparam \myHalfAdder|Add0~0 .lut_mask = 64'h6666666666666666;
defparam \myHalfAdder|Add0~0 .shared_arith = "off";
// synopsys translate_on

cyclonev_io_ibuf \SW[1]~input (
	.i(SW[1]),
	.ibar(gnd),
	.dynamicterminationcontrol(gnd),
	.o(\SW[1]~input_o ));
// synopsys translate_off
defparam \SW[1]~input .bus_hold = "false";
defparam \SW[1]~input .simulate_z_as = "z";
// synopsys translate_on

cyclonev_io_ibuf \SW[3]~input (
	.i(SW[3]),
	.ibar(gnd),
	.dynamicterminationcontrol(gnd),
	.o(\SW[3]~input_o ));
// synopsys translate_off
defparam \SW[3]~input .bus_hold = "false";
defparam \SW[3]~input .simulate_z_as = "z";
// synopsys translate_on

cyclonev_lcell_comb \myHalfAdder|Add0~1 (
// Equation(s):
// \myHalfAdder|Add0~1_combout  = !\SW[1]~input_o  $ (!\SW[3]~input_o  $ (((\SW[0]~input_o  & \SW[2]~input_o ))))

	.dataa(!\SW[0]~input_o ),
	.datab(!\SW[2]~input_o ),
	.datac(!\SW[1]~input_o ),
	.datad(!\SW[3]~input_o ),
	.datae(gnd),
	.dataf(gnd),
	.datag(gnd),
	.cin(gnd),
	.sharein(gnd),
	.combout(\myHalfAdder|Add0~1_combout ),
	.sumout(),
	.cout(),
	.shareout());
// synopsys translate_off
defparam \myHalfAdder|Add0~1 .extended_lut = "off";
defparam \myHalfAdder|Add0~1 .lut_mask = 64'h1EE11EE11EE11EE1;
defparam \myHalfAdder|Add0~1 .shared_arith = "off";
// synopsys translate_on

cyclonev_lcell_comb \myHalfAdder|Add0~2 (
// Equation(s):
// \myHalfAdder|Add0~2_combout  = (!\SW[1]~input_o  & (\SW[0]~input_o  & (\SW[2]~input_o  & \SW[3]~input_o ))) # (\SW[1]~input_o  & (((\SW[0]~input_o  & \SW[2]~input_o )) # (\SW[3]~input_o )))

	.dataa(!\SW[0]~input_o ),
	.datab(!\SW[2]~input_o ),
	.datac(!\SW[1]~input_o ),
	.datad(!\SW[3]~input_o ),
	.datae(gnd),
	.dataf(gnd),
	.datag(gnd),
	.cin(gnd),
	.sharein(gnd),
	.combout(\myHalfAdder|Add0~2_combout ),
	.sumout(),
	.cout(),
	.shareout());
// synopsys translate_off
defparam \myHalfAdder|Add0~2 .extended_lut = "off";
defparam \myHalfAdder|Add0~2 .lut_mask = 64'h011F011F011F011F;
defparam \myHalfAdder|Add0~2 .shared_arith = "off";
// synopsys translate_on

assign LEDR[0] = \LEDR[0]~output_o ;

assign LEDR[1] = \LEDR[1]~output_o ;

assign LEDR[2] = \LEDR[2]~output_o ;

endmodule
